:set prompt ""

:module Sound.Tidal.Context

import qualified Sound.Tidal.Scales as Scales
import qualified Sound.Tidal.Chords as Chords




(cps, nudger, getNow) <- cpsUtils'

(d1,t1) <- superDirtSetters getNow
(d2,t2) <- superDirtSetters getNow
(d3,t3) <- superDirtSetters getNow
(d4,t4) <- superDirtSetters getNow
(d5,t5) <- superDirtSetters getNow
(d6,t6) <- superDirtSetters getNow
(d7,t7) <- superDirtSetters getNow
(d8,t8) <- superDirtSetters getNow
(d9,t9) <- superDirtSetters getNow
(d10,t10) <- superDirtSetters getNow

(c1,ct1) <- dirtSetters getNow
(c2,ct2) <- dirtSetters getNow
(c3,ct3) <- dirtSetters getNow
(c4,ct4) <- dirtSetters getNow
(c5,ct5) <- dirtSetters getNow
(c6,ct6) <- dirtSetters getNow
(c7,ct7) <- dirtSetters getNow
(c8,ct8) <- dirtSetters getNow
(c9,ct9) <- dirtSetters getNow
(c10,ct10) <- dirtSetters getNow

let bps x = cps (x/2)
let hush = mapM_ ($ silence) [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,d1,d2,d3,d4,d5,d6,d7,d8,d9,d10]
let solo = (>>) hush

:set prompt "tidal> "

let sksine = [ 0.0, 0.0048152733278031, 0.01921471959677, 0.043059664267791, 0.076120467488713, 0.11807873565164, 0.16853038769745, 0.22698954663726, 0.29289321881345, 0.36560671583635, 0.4444297669804, 0.528603263174, 0.61731656763491, 0.70971532274554, 0.80490967798387, 0.90198285967044, 1, 1.0980171403296, 1.1950903220161, 1.2902846772545, 1.3826834323651, 1.471396736826, 1.5555702330196, 1.6343932841636, 1.7071067811865, 1.7730104533627, 1.8314696123025, 1.8819212643484, 1.9238795325113, 1.9569403357322, 1.9807852804032, 1.9951847266722, 2.0, 1.9951847266722, 1.9807852804032, 1.9569403357322, 1.9238795325113, 1.8819212643484, 1.8314696123025, 1.7730104533627, 1.7071067811865, 1.6343932841636, 1.5555702330196, 1.471396736826, 1.3826834323651, 1.2902846772545, 1.1950903220161, 1.0980171403296, 1, 0.90198285967044, 0.80490967798387, 0.70971532274554, 0.61731656763491, 0.528603263174, 0.4444297669804, 0.36560671583635, 0.29289321881345, 0.22698954663726, 0.16853038769745, 0.11807873565165, 0.076120467488714, 0.043059664267792, 0.01921471959677, 0.0048152733278031 ]

let skexp = [ 0.0099998333341667, 0.010745871461447, 0.011547563194185, 0.012409059117807, 0.013334819096196, 0.014329635252876, 0.015398656644266, 0.016547415745833, 0.017781856879666, 0.019108366719965, 0.02053380702113, 0.022065549721406, 0.023711514583387, 0.025480209540843, 0.027380773929258, 0.029423024784737, 0.031617506402434, 0.033975543350783, 0.036509297141199, 0.03923182675379, 0.042157153217257, 0.045300328434376, 0.048677508432062, 0.052306031195257, 0.056204499214692, 0.06039286683743, 0.0648925324526, 0.069726435469048, 0.074919157941476, 0.080497030571059, 0.08648824263746, 0.092922955202236, 0.099833416646828, 0.10725407925689, 0.1152217151207, 0.12377552905005, 0.13295726553039, 0.14281130582851, 0.15338475029015, 0.16472747949553, 0.17689218624615, 0.18993436825746, 0.20391226883755, 0.21888674963449, 0.23492107560384, 0.2520805875299, 0.27043223154823, 0.2900439079547, 0.31098359290719, 0.33331817616426, 0.35711194547089, 0.38242463329394, 0.40930892404194, 0.4378072994333, 0.46794807616943, 0.49974046358824, 0.53316843991402, 0.56818321501403, 0.60469401697826, 0.64255691235805, 0.68156135035527, 0.72141411709413, 0.7617204084716, 0.80196179521479, 0.8414709848079, 0.80196179521479, 0.7617204084716, 0.72141411709413, 0.68156135035527, 0.64255691235805, 0.60469401697826, 0.56818321501403, 0.53316843991402, 0.49974046358824, 0.46794807616943, 0.4378072994333, 0.40930892404194, 0.38242463329394, 0.35711194547089, 0.33331817616426, 0.31098359290719, 0.2900439079547, 0.27043223154823, 0.2520805875299, 0.23492107560384, 0.21888674963449, 0.20391226883755, 0.18993436825746, 0.17689218624615, 0.16472747949553, 0.15338475029015, 0.14281130582851, 0.13295726553039, 0.12377552905005, 0.1152217151207, 0.10725407925689, 0.099833416646828, 0.092922955202236, 0.08648824263746, 0.080497030571059, 0.074919157941476, 0.069726435469048, 0.0648925324526, 0.06039286683743, 0.056204499214692, 0.052306031195257, 0.048677508432062, 0.045300328434376, 0.042157153217257, 0.03923182675379, 0.036509297141199, 0.033975543350783, 0.031617506402434, 0.029423024784737, 0.027380773929258, 0.025480209540843, 0.023711514583387, 0.022065549721406, 0.02053380702113, 0.019108366719965, 0.017781856879666, 0.016547415745833, 0.015398656644266, 0.014329635252876, 0.013334819096196, 0.012409059117807, 0.011547563194185, 0.010745871461447, 0.0099998333341667 ]

let 
  (pnote, pnote_p) = pF "pnote" (Just 0.0)
  (pitchDisp, pitchDisp_p) = pF "pitchDisp" (Just 0.01)
  (timeDisp, timeDisp_p) = pF "timeDisp" (Just 0.05)
  (tfb, tfb_p) = pF "tfb" (Just 0.1)
  (depth, depth_p) = pF "depth" (Just 1.0)
  (dtoffset, dtoffset_p) = pF "dtoffset" (Just 1.0)
  (drop, drop_p) = pF "drop" (Just 1.0)
  (sdtphase, sdtphase_p) = pF "sdtphase" (Just 1.0)
  (dtonTime, dtonTime_p) = pF "dtonTime" (Just 1.0)
  (dtoffTime, dtoffTime_p) = pF "dtoffTime" (Just 1.0)
  (dtcurve, dtcurve_p) = pI "dtcurve" (Just 0)
  (dtime, dtime_p) = pF "dtime" (Just 0.2)
  (strobe, strobe_p) = pF "strobe" (Just 1.0)
  (lsphase, lsphase_p) = pF "lsphase" (Just 1.0)
  (lscurve, lscurve_p) = pI "lscurve" (Just 0)
  (onTime, onTime_p) = pF "onTime" (Just 1.0)
  (offTime, offTime_p) = pF "offTime" (Just 1.0)
  (damp, damp_p) = pF "damp" (Just 0.5)
  (slide, slide_p) = pF "slide_p" (Just 0.2)
  (lnfreq, lnfreq_p) = pF "lnfreq" (Just 1000.0)
  (rqn, rqn_p) = pF "rqn" (Just 0.8)
  (dist, dist_p) = pF "dist" (Just 0.2)
  (fold, fold_p) = pF "fold" (Just 1)
  (slide, slide_p) = pF "slide" (Just 0.2)
  (aatk, aatk_p) = pF "aatk" (Just 0.01)
  (adec, adec_p) = pF "adec" (Just 0.2)
  (asus, asus_p) = pF "asus" (Just 0.0)
  (arel, arel_p) = pF "arel" (Just 0.1)
  (apluk, apluk_p) = pF "apluk" (Just 0.0)
  (astret, astret_p) = pF "astret" (Just 1.0)
  (batk, batk_p) = pF "batk" (Just 0.01)
  (bdec, bdec_p) = pF "bdec" (Just 0.2)
  (bsus, bsus_p) = pF "bsus" (Just 0.0)
  (brel, brel_p) = pF "brel" (Just 0.1)
  (bpluk, bpluk_p) = pF "bpluk" (Just 0.0)
  (bstret, bstret_p) = pF "bstret" (Just 1.0)
  (catk, catk_p) = pF "catk" (Just 0.01)
  (cdec, cdec_p) = pF "cdec" (Just 0.2)
  (csus, csus_p) = pF "csus" (Just 0.0)
  (crel, crel_p) = pF "crel" (Just 0.1)
  (cpluk, cpluk_p) = pF "cpluk" (Just 0.0)
  (cstret, cstret_p) = pF "cstret" (Just 1.0)
  (datk, datk_p) = pF "datk" (Just 0.01)
  (ddec, ddec_p) = pF "ddec" (Just 0.2)
  (dsus, dsus_p) = pF "dsus" (Just 0.0)
  (drel, drel_p) = pF "drel" (Just 0.1)
  (dpluk, dpluk_p) = pF "dpluk" (Just 0.0)
  (dstret, dstret_p) = pF "dstret" (Just 1.0)
  (ddeg, ddeg_p) = pF "ddeg" (Just 0.0)
  (atk, atk_p) = pF "atk" (Just 0.01)
  (dec, dec_p) = pF "dec" (Just 0.2)
  (sus, sus_p) = pF "sus" (Just 0.0)
  (rel, rel_p) = pF "rel" (Just 0.1)
  (pluk, pluk_p) = pF "pluk" (Just 0.0)
  (stret, stret_p) = pF "stret" (Just 1.0)
  (deg, deg_p) = pF "deg" (Just 0.0)

import Sound.Tidal.Time
import Sound.Tidal.Utils
import Data.Maybe

let playOnce dn p = getNow >>= \x -> dn (rotR (x+0.063) $ playFor 0 1 $ p)

let toScale_p = temporalParam toScale
    scalePat scs p =  fmap (scs !!!) p


let 
  (degree, degree_p) = pF "degree" (Nothing)
  (ctranspose, ctranspose_p) = pF "ctranspose" (Nothing)
  (mtranspose, mtranspose_p) = pF "mtranspose" (Nothing)
  (gtranspose, gtranspose_p) = pF "gtranspose" (Nothing)
  (harmonic, harmonic_p) = pF "harmonic" (Nothing)
  (detune, detune_p) = pF "detune" (Nothing)
  (scale, scale_p) = pS "scaleName" (Nothing)
  (tuning, tuning_p) = pS "tuningName" (Nothing)
  (stepsPerOctave, stepsPerOctave_p) = pI "stepsPerOctave" (Nothing)
  (octaveRatio, octaveRatio_p) = pF "octaveRatio" (Nothing)

let
  (midicmd, midicmd_p) = pS "midicmd" (Nothing)
  (chan, chan_p) = pF "chan" (Nothing)
  (progNum, progNum_p) = pF "progNum" (Nothing)
  (val, val_p) = pF "val" (Nothing)
  (uid, uid_p) = pF "uid" (Nothing)
  (array, array_p) = pF "array" (Nothing)
  (frames, frames_p) = pF "frames" (Nothing)
  (seconds, seconds_p) = pF "seconds" (Nothing)
  (minutes, minutes_p) = pF "minutes" (Nothing)
  (hours, hours_p) = pF "hours" (Nothing)
  (frameRate, frameRate_p) = pF "frameRate" (Nothing)
  (songPtr, songPtr_p) = pF "songPtr" (Nothing)
  (ctlNum, ctlNum_p) = pF "ctlNum" (Nothing)
  (control, control_p) = pF "control" (Nothing)
